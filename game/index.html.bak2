<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, viewport-fit=cover">
    <meta name="theme-color" content="#070720">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    <title>CCLLDance | SNAKE GAME</title>
    
    <!-- 字体和样式 -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap">
    <link rel="stylesheet" href="css/snake.css">
    <style>
        body, html {
            margin: 0;
            padding: 0;
            height: 100%;
            width: 100%;
            overflow: hidden;
            background-color: #0d0b2a;
            font-family: 'Press Start 2P', monospace;
            font-size: 12px;
        }
        
        /* 全局禁用滚动条 */
        ::-webkit-scrollbar {
            display: none;
        }
        
        * {
            -ms-overflow-style: none;  /* IE and Edge */
            scrollbar-width: none;  /* Firefox */
        }
        
        .game-wrapper {
            display: flex;
            width: 100%;
            height: 100vh;
            align-items: stretch;
            overflow: hidden;
        }
        
        /* 左栏 - 排行榜 */
        .leaderboard {
            width: 22%;
            background-color: #0d0b2a;
            padding: 15px;
            color: #f0f8ff;
            display: flex;
            flex-direction: column;
            border-right: 1px solid rgba(157, 25, 255, 0.5);
            box-shadow: 5px 0 15px rgba(0, 0, 0, 0.3);
            transition: all 0.3s ease;
            position: relative;
            height: 100vh;
            box-sizing: border-box;
        }
        
        /* 内容卡片样式调整，确保其填充可用空间 */
        .content-card {
            background-color: #0d0b2a;
            border-radius: 12px;
            box-shadow: 0 0 0 2px rgba(157, 25, 255, 0.5), 
                        0 0 30px rgba(157, 25, 255, 0.3), 
                        0 0 10px rgba(255, 42, 106, 0.4);
            border: 1px solid rgba(255, 42, 106, 0.5);
            transition: all 0.3s ease;
            padding: 15px;
            margin-bottom: 20px;
            display: flex;
            flex-direction: column;
            flex: 1;
            overflow: hidden; /* 防止内容溢出 */
            height: calc(100vh - 30px); /* 减去padding */
        }
        
        .leaderboard-card-container {
            display: flex;
            flex-direction: column;
            overflow-y: auto;
            flex: 1;
            padding-right: 5px;
            margin-bottom: 5px;
            scrollbar-width: thin;
            scrollbar-color: rgba(157, 25, 255, 0.5) rgba(25, 25, 60, 0.3);
        }
        
        .leaderboard-card {
            background: rgba(25, 25, 60, 0.5);
            border-radius: 10px;
            padding: 12px;
            margin-bottom: 12px;
            border: 1px solid rgba(157, 25, 255, 0.3);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
            transition: all 0.3s ease;
        }
        
        /* 添加时间和位置信息的样式 */
        .player-details {
            display: flex;
            justify-content: space-between;
            font-size: 0.5rem;
            margin-top: 5px;
            color: rgba(240, 248, 255, 0.7);
        }
        
        .player-location {
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            max-width: 45%;
        }
        
        .player-date {
            text-align: right;
            max-width: 55%;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }
        
        /* 自定义滚动条 */
        .leaderboard-card-container::-webkit-scrollbar {
            width: 6px;
        }
        
        .leaderboard-card-container::-webkit-scrollbar-track {
            background: rgba(25, 25, 60, 0.3);
            border-radius: 3px;
        }
        
        .leaderboard-card-container::-webkit-scrollbar-thumb {
            background: rgba(157, 25, 255, 0.5);
            border-radius: 3px;
        }
        
        .leaderboard-card-container::-webkit-scrollbar-thumb:hover {
            background: rgba(255, 42, 106, 0.5);
        }
        
        /* 中栏 - 游戏区域 */
        .game-area {
            width: 56%;
            display: flex;
            justify-content: center;
            align-items: center;
            background-color: #0d0b2a;
            position: relative;
            aspect-ratio: auto;
            height: 100vh;
            box-sizing: border-box;
            padding: 15px;
        }
        
        /* 右栏 - 控制区域 */
        .sidebar {
            width: 22%;
            background-color: #0d0b2a;
            padding: 15px;
            color: #f0f8ff;
            display: flex;
            flex-direction: column;
            border-left: 1px solid rgba(157, 25, 255, 0.5);
            box-shadow: -5px 0 15px rgba(0, 0, 0, 0.3);
            overflow-y: auto;
            transition: all 0.3s ease;
            position: relative;
        }
        
        /* 左右两栏中的内容卡片容器 */
        .content-card {
            background-color: #0d0b2a;
            border-radius: 12px;
            box-shadow: 0 0 0 2px rgba(157, 25, 255, 0.5), 
                        0 0 30px rgba(157, 25, 255, 0.3), 
                        0 0 10px rgba(255, 42, 106, 0.4);
            border: 1px solid rgba(255, 42, 106, 0.5);
            transition: all 0.3s ease;
            padding: 15px;
            margin-bottom: 20px;
            display: flex;
            flex-direction: column;
            flex: 1;
            overflow: hidden; /* 防止内容溢出 */
            height: calc(100vh - 30px); /* 减去padding */
        }
        
        .content-card:hover {
            box-shadow: 0 0 0 1px rgba(157, 25, 255, 0.7), 
                        0 0 30px rgba(157, 25, 255, 0.4), 
                        0 0 15px rgba(255, 42, 106, 0.4);
            transform: translateY(-5px);
        }
        
        .leaderboard-title, .game-title {
            font-family: 'Press Start 2P', monospace;
            font-size: 1.1rem;
            margin-bottom: 1.5rem;
            text-align: center;
            color: #f0f8ff;
            text-shadow: 0 0 10px rgba(157, 25, 255, 0.8), 
                        0 0 20px rgba(255, 42, 106, 0.5);
        }
        
        .leaderboard-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 20px rgba(157, 25, 255, 0.3);
            border-color: rgba(157, 25, 255, 0.5);
        }
        
        .leaderboard-card.top1 {
            background: linear-gradient(135deg, rgba(255, 215, 0, 0.2) 0%, rgba(255, 215, 0, 0.1) 100%);
            border-color: rgba(255, 215, 0, 0.5);
        }
        
        .leaderboard-card.top2 {
            background: linear-gradient(135deg, rgba(192, 192, 192, 0.2) 0%, rgba(192, 192, 192, 0.1) 100%);
            border-color: rgba(192, 192, 192, 0.5);
        }
        
        .leaderboard-card.top3 {
            background: linear-gradient(135deg, rgba(205, 127, 50, 0.2) 0%, rgba(205, 127, 50, 0.1) 100%);
            border-color: rgba(205, 127, 50, 0.5);
        }
        
        .rank {
            display: flex;
            align-items: center;
            margin-bottom: 10px;
        }
        
        .rank-number {
            font-family: 'Press Start 2P', monospace;
            font-size: 1.2rem;
            margin-right: 10px;
            color: #f0f8ff;
        }
        
        .rank-medal {
            font-size: 1.5rem;
            margin-right: 10px;
        }
        
        .player-info {
            display: flex;
            flex-direction: column;
        }
        
        .player-ip {
            font-family: 'Press Start 2P', monospace;
            font-size: 0.7rem;
            color: #f0f8ff;
            margin-bottom: 5px;
            word-break: break-all;
        }
        
        .player-score {
            font-family: 'Press Start 2P', monospace;
            font-size: 1.1rem;
            color: #ff2a6a;
        }
        
        .start-btn {
            font-family: 'Press Start 2P', monospace;
            font-size: 0.8rem;
            padding: 0.8rem 0;
            width: 100%;
            margin-bottom: 20px;
            background: linear-gradient(90deg, #9d19ff 0%, #ff2a6a 100%);
            border: none;
            border-radius: 50px;
            color: #f0f8ff;
            cursor: pointer;
            transition: all 0.3s ease;
            text-shadow: 0 0 5px rgba(255, 255, 255, 0.5);
        }
        
        .start-btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 5px 15px rgba(157, 25, 255, 0.4);
        }
        
        .instructions {
            flex: 1;
            font-size: 0.85rem;
            line-height: 1.6;
            margin-top: 20px;
            display: flex;
            flex-direction: column;
            gap: 12px;
        }
        
        .instruction-row {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .instruction-icon {
            font-size: 1.2rem;
            color: #9d19ff;
            min-width: 20px;
            display: flex;
            justify-content: center;
        }
        
        .instruction-text {
            flex: 1;
        }
        
        .game-key {
            display: inline-block;
            padding: 0.2rem 0.5rem;
            background: rgba(157, 25, 255, 0.2);
            border: 1px solid rgba(157, 25, 255, 0.5);
            border-radius: 4px;
            margin: 0 0.2rem;
        }
        
        .controls-row {
            display: flex;
            justify-content: center;
            gap: 10px;
            margin-top: 15px;
        }
        
        .game-btn {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            background: rgba(15, 15, 45, 0.7);
            border: 1px solid rgba(157, 25, 255, 0.5);
            color: #f0f8ff;
            font-size: 18px;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .game-btn:hover {
            background: rgba(25, 25, 60, 0.9);
            border-color: rgba(157, 25, 255, 0.8);
            transform: translateY(-2px);
        }
        
        /* 游戏容器确保居中且大小合适 */
        .snake-game-container {
            position: relative;
            width: 100%;
            height: 100%;
            max-width: min(90%, 90vh);
            max-height: min(90%, 90vh);
            background-color: #0d0b2a;
            border-radius: 12px;
            box-shadow: 0 0 0 2px rgba(157, 25, 255, 0.5), 
                        0 0 30px rgba(157, 25, 255, 0.3), 
                        0 0 10px rgba(255, 42, 106, 0.4);
            overflow: hidden;
            display: flex;
            justify-content: center;
            align-items: center;
            border: 1px solid rgba(255, 42, 106, 0.5);
            box-sizing: border-box;
            transition: all 0.3s ease;
            margin: auto;
            background: 
                linear-gradient(to right, rgba(30, 30, 30, 0.1) 1px, transparent 1px),
                linear-gradient(to bottom, rgba(30, 30, 30, 0.1) 1px, transparent 1px),
                #0d0b2a;
            background-size: 20px 20px;
        }
        
        .snake-game-container:hover {
            box-shadow: 0 0 0 1px rgba(157, 25, 255, 0.7), 
                        0 0 30px rgba(157, 25, 255, 0.4), 
                        0 0 15px rgba(255, 42, 106, 0.4);
            transform: translateY(-5px);
        }
        
        .snake-game-canvas {
            width: 100%;
            height: 100%;
            display: block;
            image-rendering: pixelated;
            background-color: #0d0b2a;
            background-image: linear-gradient(rgba(50, 50, 100, 0.1) 1px, transparent 1px),
                              linear-gradient(90deg, rgba(50, 50, 100, 0.1) 1px, transparent 1px);
            background-size: 20px 20px;
            box-shadow: inset 0 0 20px rgba(157, 25, 255, 0.2);
            border-radius: 8px;
        }
        
        .game-score {
            position: absolute;
            top: 15px;
            left: 15px;
            font-family: 'Press Start 2P', monospace;
            font-size: 1.6rem;
            color: #f0f8ff;
            z-index: 10;
            pointer-events: none;
            text-shadow: 0 0 8px rgba(157, 25, 255, 0.8), 0 0 15px rgba(255, 42, 106, 0.5);
        }
        
        .instructions-title {
            font-family: 'Press Start 2P', monospace;
            font-size: 0.9rem;
            margin-bottom: 15px;
            text-align: center;
            color: #f0f8ff;
            padding-bottom: 8px;
            border-bottom: 2px solid rgba(157, 25, 255, 0.3);
        }
        
        /* 移动设备适配 - 优化版 */
        @media (max-width: 1024px) {
            /* 基础布局调整 */
            .game-wrapper {
                flex-direction: column;
                height: 100%;
                overflow: hidden;
            }
            
            /* 排行榜区域 */
            .leaderboard {
                width: 100%;
                height: auto;
                max-height: 35vh;
                padding: 10px;
                border: none;
                border-bottom: 1px solid rgba(157, 25, 255, 0.5);
                box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
            }
            
            /* 游戏区域 - 给予更多空间 */
            .game-area {
                width: 100%;
                height: 45vh;
                min-height: 300px;
                padding: 5px;
                position: relative;
                flex-shrink: 0;
            }
            
            /* 侧边栏区域 */
            .sidebar {
                width: 100%;
                height: auto;
                max-height: 25vh;
                padding: 10px;
                border: none;
                border-top: 1px solid rgba(157, 25, 255, 0.5);
                box-shadow: 0 -5px 15px rgba(0, 0, 0, 0.3);
            }
            
            /* 容器样式调整 */
            .content-card {
                margin-bottom: 10px;
                padding: 10px;
                height: calc(35vh - 20px); /* 移动端高度调整 */
            }
            
            /* 游戏容器确保居中且大小合适 */
            .snake-game-container {
                width: 95%;
                height: 95%;
                max-width: min(95vw, 92vmin);
                max-height: min(95vw, 92vmin);
                position: absolute;
                left: 50%;
                top: 50%;
                transform: translate(-50%, -50%);
            }
            
            /* 排行榜卡片横向排列前三名 */
            .leaderboard-card-container {
                flex-wrap: wrap;
                gap: 8px;
                max-height: none;
            }
            
            .leaderboard-card-container > div:nth-child(-n+3) {
                width: calc(33.33% - 6px);
                margin-bottom: 8px;
            }
            
            .leaderboard-card-container > div:nth-child(n+4) {
                width: 100%;
                margin-bottom: 8px;
            }
            
            /* 分页控件调整 */
            .pagination-controls {
                padding-top: 5px;
                position: relative;
                box-shadow: none;
            }
            
            .pagination-btn {
                width: 24px;
                height: 24px;
                font-size: 12px;
            }
            
            .page-info {
                font-size: 0.5rem;
            }
        }
        
        /* 更小屏幕的设备（手机）适配 */
        @media (max-width: 768px) {
            /* 排行榜区域缩小 */
            .leaderboard {
                max-height: 28vh;
                padding: 8px;
            }
            
            /* 增加游戏区域比例 */
            .game-area {
                height: 52vh;
            }
            
            /* 减小侧边栏高度 */
            .sidebar {
                max-height: 20vh;
                padding: 8px;
            }
            
            /* 卡片内容调整 */
            .player-ip {
                font-size: 0.5rem;
            }
            
            .player-score {
                font-size: 0.7rem;
            }
            
            .rank-number, .rank-medal {
                font-size: 0.75rem;
            }
            
            .leaderboard-card {
                padding: 6px;
            }

            .content-card {
                padding: 8px;
            }
            
            .game-key {
                padding: 0.1rem 0.3rem;
                font-size: 0.6rem;
            }
            
            /* 游戏容器调整 */
            .snake-game-container {
                max-width: min(95vw, 95vmin);
                max-height: min(95vw, 95vmin);
            }
            
            /* 标题和说明调整 */
            .leaderboard-title, .game-title {
                font-size: 0.75rem;
                margin-bottom: 8px;
            }
            
            .instructions {
                font-size: 0.55rem;
                gap: 5px;
            }
            
            .instruction-icon {
                font-size: 0.8rem;
                min-width: 14px;
            }
            
            /* 排行榜详情布局 */
            .player-details {
                flex-direction: column;
                align-items: flex-start;
            }
            
            .player-location, .player-date {
                font-size: 0.45rem;
                max-width: 100%;
            }
            
            .instructions-title {
                font-size: 0.65rem;
                margin-bottom: 8px;
                padding-bottom: 5px;
            }
            
            /* 按钮调整 */
            .game-btn {
                width: 30px;
                height: 30px;
                font-size: 14px;
            }
            
            /* 分数在移动设备上也要增大 */
            .game-score {
                font-size: 1.2rem;
                top: 10px;
                left: 10px;
            }
            
            /* 标签和分页调整 */
            .tab-btn {
                font-size: 0.5rem;
                padding: 5px 0;
            }
            
            .pagination-btn {
                width: 24px;
                height: 24px;
            }
        }
        
        /* 竖屏模式下的特殊调整 */
        @media (max-width: 768px) and (orientation: portrait) {
            /* 游戏区域更大化 */
            .game-area {
                height: 60vh;
            }
            
            /* 排行榜和侧边栏更紧凑 */
            .leaderboard {
                max-height: 20vh;
            }
            
            .sidebar {
                max-height: 20vh;
            }
            
            /* 排行榜卡片通过滚动访问 */
            .leaderboard-card-container > div:nth-child(-n+3) {
                width: 100%;
            }

            /* 优化小屏手机 */
            @media (max-height: 667px) {
                .leaderboard {
                    max-height: 18vh;
                }
                
                .game-area {
                    height: 64vh;
                }
                
                .sidebar {
                    max-height: 18vh;
                }

                .start-btn {
                    margin-bottom: 10px;
                    padding: 0.5rem 0;
                }
                
                .controls-row {
                    margin-top: 8px;
                }
                
                .instructions {
                    margin-top: 8px;
                    gap: 3px;
                }
            }
        }
        
        /* 横屏模式下的特殊调整 */
        @media (max-width: 896px) and (orientation: landscape) {
            /* 基本布局调整 */
            .game-wrapper {
                flex-direction: row;
                flex-wrap: wrap;
            }
            
            /* 游戏区域居中 */
            .game-area {
                width: 60%;
                height: 100vh;
                order: 2;
            }
            
            /* 左右两侧布局 */
            .leaderboard {
                width: 40%;
                height: 50vh;
                max-height: 50vh;
                order: 1;
            }
            
            .sidebar {
                width: 40%;
                height: 50vh;
                max-height: 50vh;
                order: 3;
            }
            
            /* 排行榜卡片排列 */
            .leaderboard-card-container > div {
                width: 100%;
            }
            
            /* 针对低高度的横屏模式 */
            @media (max-height: 450px) {
                .game-area {
                    width: 65%;
                }
                
                .leaderboard, .sidebar {
                    width: 35%;
                }
                
                .content-card {
                    padding: 6px;
                }
                
                .start-btn {
                    padding: 0.5rem 0;
                    margin-bottom: 8px;
                    font-size: 0.7rem;
                }
                
                .game-title, .leaderboard-title {
                    font-size: 0.65rem;
                    margin-bottom: 6px;
                }
                
                .instructions-title {
                    font-size: 0.55rem;
                    margin-bottom: 4px;
                }
                
                .game-btn {
                    width: 26px;
                    height: 26px;
                }
                
                .player-name-container {
                    margin-top: 6px;
                    padding-top: 6px;
                }
            }
        }
        
        /* 添加排行榜选项卡和分页控件的样式 */
        .leaderboard-tabs {
            display: flex;
            justify-content: space-between;
            margin-bottom: 15px;
            border-bottom: 1px solid rgba(157, 25, 255, 0.3);
        }
        
        .tab-btn {
            flex: 1;
            background: none;
            border: none;
            color: #f0f8ff;
            font-family: 'Press Start 2P', monospace;
            font-size: 0.6rem;
            padding: 8px 0;
            cursor: pointer;
            opacity: 0.6;
            transition: all 0.3s ease;
        }
        
        .tab-btn.active {
            opacity: 1;
            border-bottom: 2px solid #ff2a6a;
        }
        
        .pagination-controls {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding-top: 10px;
            border-top: 1px solid rgba(157, 25, 255, 0.3);
            margin-top: auto; /* 将分页控件推到底部 */
            position: sticky;
            bottom: 0;
            background-color: #0d0b2a;
            z-index: 5;
            width: 100%;
            left: 0;
            box-shadow: 0 -4px 10px rgba(0, 0, 0, 0.2);
        }
        
        .pagination-btn {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            background: linear-gradient(135deg, #9d19ff 0%, #ff2a6a 100%);
            border: none;
            color: #f0f8ff;
            font-size: 16px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 0 15px rgba(157, 25, 255, 0.3);
        }
        
        .pagination-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            background: rgba(157, 25, 255, 0.3);
            box-shadow: none;
        }
        
        .pagination-btn:not(:disabled):hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(157, 25, 255, 0.5);
        }
        
        .page-info {
            font-family: 'Press Start 2P', monospace;
            font-size: 0.6rem;
            color: #f0f8ff;
            text-shadow: 0 0 5px rgba(157, 25, 255, 0.5);
        }
        
        .loading-indicator {
            display: flex;
            justify-content: center;
            align-items: center;
            text-align: center;
            font-family: 'Press Start 2P', monospace;
            font-size: 0.8rem;
            color: #f0f8ff;
            height: 150px;
            padding: 20px;
            text-shadow: 0 0 10px rgba(157, 25, 255, 0.8);
            position: relative;
            overflow: hidden;
            animation: pulse 1.5s ease-in-out infinite;
        }
        
        .loading-indicator::before {
            content: '';
            position: absolute;
            width: 100%;
            height: 2px;
            background: linear-gradient(to right, transparent, #ff2a6a, #9d19ff, transparent);
            top: 50%;
            left: 0;
            transform: translateY(-50%);
            animation: loading-bar 2s linear infinite;
        }
        
        @keyframes pulse {
            0%, 100% { opacity: 0.6; }
            50% { opacity: 1; }
        }
        
        @keyframes loading-bar {
            0% { transform: translateY(-50%) translateX(-100%); }
            100% { transform: translateY(-50%) translateX(100%); }
        }
        
        /* 当没有数据时显示的消息 */
        .no-data {
            text-align: center;
            font-family: 'Press Start 2P', monospace;
            font-size: 0.8rem;
            color: #f0f8ff;
            padding: 40px 20px;
            opacity: 0.7;
            text-shadow: 0 0 10px rgba(255, 42, 106, 0.6);
        }
        
        .error-message {
            text-align: center;
            font-family: 'Press Start 2P', monospace;
            font-size: 0.7rem;
            color: #ff2a6a;
            padding: 20px;
            opacity: 0.9;
            animation: pulse 1.5s infinite;
            text-shadow: 0 0 10px rgba(255, 42, 106, 0.5);
            border: 1px dashed rgba(255, 42, 106, 0.3);
            border-radius: 8px;
            background: rgba(255, 42, 106, 0.1);
            margin: 20px 0;
        }
        
        /* 移动设备下的样式调整 */
        @media (max-width: 768px) {
            .tab-btn {
                font-size: 0.5rem;
                padding: 6px 0;
            }
            
            .pagination-controls {
                margin-top: 10px;
                padding-top: 8px;
            }
            
            .pagination-btn {
                width: 25px;
                height: 25px;
            }
            
            .page-info {
                font-size: 0.4rem;
            }
        }
        
        /* 移动设备触摸控制优化 */
        @media (hover: none) and (pointer: coarse) {
            /* 增加触摸目标大小 */
            .game-btn {
                width: 48px;
                height: 48px;
                font-size: 20px;
                margin: 0 8px;
            }
            
            /* 增加触摸反馈 */
            .game-btn:active {
                transform: scale(0.9);
                background: rgba(157, 25, 255, 0.4);
            }
            
            .tab-btn:active, .pagination-btn:active {
                opacity: 0.7;
            }
            
            /* 调整交互元素间距，防止误触 */
            .controls-row {
                gap: 20px;
                margin-top: 15px;
            }
            
            /* 增强按钮可见性 */
            .start-btn {
                padding: 14px 0;
                font-size: 0.8rem;
                box-shadow: 0 3px 10px rgba(157, 25, 255, 0.4);
            }
            
            /* 确保足够的触摸空间 */
            .pagination-btn {
                width: 38px;
                height: 38px;
            }
            
            /* 改进移动端按钮触摸区域 */
            .overlay-start-btn {
                padding: 1.4rem 2.8rem;
            }
            
            .player-name-btn {
                width: 44px;
                height: 44px;
            }
            
            .player-name-input {
                padding: 12px 15px;
                height: 44px;
            }
            
            /* 适配安全区域 */
            @supports (padding: env(safe-area-inset-bottom)) {
                .game-wrapper {
                    padding-top: env(safe-area-inset-top);
                    padding-bottom: env(safe-area-inset-bottom);
                    padding-left: env(safe-area-inset-left);
                    padding-right: env(safe-area-inset-right);
                }
                
                /* 修复底部栏控件在刘海屏上的位置 */
                .sidebar .content-card {
                    padding-bottom: calc(15px + env(safe-area-inset-bottom));
                }
            }
            
            /* 小屏设备触摸优化 */
            @media (max-width: 360px), (max-height: 640px) {
                .game-btn {
                    width: 40px;
                    height: 40px;
                    font-size: 16px;
                    margin: 0 5px;
                }
                
                .controls-row {
                    gap: 12px;
                }
                
                .start-btn {
                    padding: 10px 0;
                }
            }
        }
        
        /* iPhone X及以上全面屏设备适配 */
        @media only screen and (device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3),
               only screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2),
               only screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3),
               only screen and (device-width: 390px) and (device-height: 844px) and (-webkit-device-pixel-ratio: 3),
               only screen and (device-width: 428px) and (device-height: 926px) and (-webkit-device-pixel-ratio: 3) {
            .game-wrapper {
                padding-top: env(safe-area-inset-top);
                padding-bottom: env(safe-area-inset-bottom);
            }
        }
        
        /* 游戏覆盖按钮样式 */
        .game-overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            background-color: rgba(13, 11, 42, 0.7);
            z-index: 20;
            backdrop-filter: none;
            border-radius: 12px;
            opacity: 1;
            transition: opacity 0.5s ease;
            border: 1px solid rgba(157, 25, 255, 0.3);
            box-shadow: inset 0 0 30px rgba(157, 25, 255, 0.2);
            /* 添加网格背景 */
            background-image: 
                linear-gradient(to right, rgba(30, 30, 30, 0.1) 1px, transparent 1px),
                linear-gradient(to bottom, rgba(30, 30, 30, 0.1) 1px, transparent 1px);
            background-size: 20px 20px;
            overflow: hidden;
        }
        
        /* 覆盖层上的蛇图形 */
        .overlay-snake {
            position: absolute;
            width: 120px;
            height: 20px;
            /* 在页面中间偏左偏上的位置 */
            left: calc(50% - 100px);
            top: calc(40% - 40px);
            transform: rotate(0deg);
            animation: snakeMove 8s infinite ease-in-out;
        }
        
        @keyframes snakeMove {
            0% { transform: translateX(-30px) rotate(0deg); }
            25% { transform: translateX(30px) rotate(0deg); }
            50% { transform: translateY(30px) translateX(30px) rotate(90deg); }
            75% { transform: translateY(30px) translateX(-30px) rotate(180deg); }
            100% { transform: translateX(-30px) rotate(0deg); }
        }
        
        .snake-segment {
            position: absolute;
            width: 20px;
            height: 20px;
            background: linear-gradient(90deg, #9d19ff 0%, #ff2a6a 100%);
            border-radius: 4px;
            box-shadow: 0 0 8px rgba(157, 25, 255, 0.4);
        }
        
        /* 蛇的头部 */
        .snake-head {
            left: 44px;
            box-shadow: 0 0 12px rgba(157, 25, 255, 0.8);
            z-index: 2;
        }
        
        /* 蛇的身体段 */
        .snake-body-1 {
            left: 22px;
            z-index: 1;
        }
        
        .snake-body-2 {
            left: 0;
        }
        
        /* 食物样式 */
        .overlay-food {
            position: absolute;
            width: 18px;
            height: 18px;
            background-color: #00e5ff;
            border-radius: 50%;
            /* 在蛇前面的位置 */
            left: calc(50% + 20px);
            top: calc(40% - 40px);
            box-shadow: 0 0 15px rgba(0, 229, 255, 0.7);
            animation: foodPulse 2s infinite, foodFloat 8s infinite ease-in-out;
            z-index: 3;
        }
        
        @keyframes foodPulse {
            0% { transform: scale(1); box-shadow: 0 0 15px rgba(0, 229, 255, 0.5); }
            50% { transform: scale(1.2); box-shadow: 0 0 20px rgba(0, 229, 255, 0.8); }
            100% { transform: scale(1); box-shadow: 0 0 15px rgba(0, 229, 255, 0.5); }
        }
        
        @keyframes foodFloat {
            0% { transform: translate(0, 0) scale(1); }
            25% { transform: translate(40px, 20px) scale(1.2); }
            50% { transform: translate(80px, 50px) scale(1); }
            75% { transform: translate(40px, 80px) scale(1.2); }
            100% { transform: translate(0, 0) scale(1); }
        }
        
        /* 添加游戏结束分数闪烁动画 */
        @keyframes scoreGlow {
            0% { 
                text-shadow: 0 0 10px rgba(157, 25, 255, 0.4), 0 0 20px rgba(255, 42, 106, 0.3); 
                filter: brightness(0.9);
            }
            50% { 
                text-shadow: 0 0 15px rgba(157, 25, 255, 0.8), 0 0 30px rgba(255, 42, 106, 0.7); 
                filter: brightness(1.1);
            }
            100% { 
                text-shadow: 0 0 10px rgba(157, 25, 255, 0.4), 0 0 20px rgba(255, 42, 106, 0.3); 
                filter: brightness(0.9);
            }
        }

        .game-over-score {
            animation: scoreGlow 2s infinite;
        }

        .game-overlay.hidden {
            opacity: 0;
            pointer-events: none;
        }

        .overlay-start-btn {
            font-family: 'Press Start 2P', monospace;
            font-size: 1.5rem;
            padding: 1.2rem 2.5rem;
            background: linear-gradient(90deg, #9d19ff 0%, #ff2a6a 100%);
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-radius: 50px;
            color: #f0f8ff;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            text-shadow: 0 0 10px rgba(255, 255, 255, 0.8);
            box-shadow: 0 0 0 2px rgba(157, 25, 255, 0.5), 
                        0 0 15px rgba(157, 25, 255, 0.4), 
                        0 0 30px rgba(255, 42, 106, 0.3);
            letter-spacing: 2px;
            z-index: 25;
        }

        .overlay-start-btn:hover {
            transform: translateY(-5px) scale(1.05);
            box-shadow: 0 0 0 3px rgba(157, 25, 255, 0.7), 
                        0 0 20px rgba(157, 25, 255, 0.6), 
                        0 0 40px rgba(255, 42, 106, 0.5);
            text-shadow: 0 0 15px rgba(255, 255, 255, 1);
        }

        .overlay-start-btn:active {
            transform: translateY(2px) scale(0.98);
            box-shadow: 0 0 0 2px rgba(157, 25, 255, 0.8), 
                        0 0 10px rgba(157, 25, 255, 0.5);
        }

        @media (max-width: 768px) {
            .overlay-start-btn {
                font-size: 1rem;
                padding: 1rem 1.8rem;
            }
        }

        .hidden {
            display: none !important;
        }

        /* 添加游戏结束标题闪烁动画 */
        @keyframes titleFlash {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.7; }
        }

        .game-over-title {
            animation: titleFlash 1s infinite;
        }

        /* 确保移动设备上的样式也合适 */
        @media (max-width: 768px) {
            .game-over-title {
                font-size: 1.5rem !important;
                margin-bottom: 10px !important;
            }
            
            .game-over-score {
                font-size: 1.2rem !important;
                margin-bottom: 20px !important;
            }
        }
        
        /* 添加玩家名称区域的样式 */
        .player-name-container {
            margin-top: 20px;
            border-top: 1px solid rgba(157, 25, 255, 0.3);
            padding-top: 15px;
        }
        
        .player-name-input-container {
            display: flex;
            gap: 10px;
            margin-top: 10px;
            align-items: center;
        }
        
        .player-name-input {
            flex: 1;
            background: rgba(13, 11, 42, 0.7);
            border: 1px solid rgba(157, 25, 255, 0.5);
            border-radius: 4px;
            color: #f0f8ff;
            font-family: 'Press Start 2P', monospace;
            font-size: 0.7rem;
            padding: 10px 12px;
            transition: all 0.3s ease;
            letter-spacing: 1px;
            text-transform: uppercase;
            box-shadow: 0 0 8px rgba(157, 25, 255, 0.2);
        }
        
        .player-name-input:focus {
            outline: none;
            border-color: rgba(157, 25, 255, 0.8);
            box-shadow: 0 0 15px rgba(157, 25, 255, 0.4), 0 0 20px rgba(255, 42, 106, 0.2);
        }
        
        .player-name-input::placeholder {
            color: rgba(240, 248, 255, 0.5);
            text-transform: uppercase;
            font-size: 0.6rem;
        }
        
        .player-name-btn {
            background: linear-gradient(90deg, #9d19ff 0%, #ff2a6a 100%);
            border: none;
            border-radius: 50%; /* 改为圆形按钮 */
            color: #f0f8ff;
            width: 38px; /* 略微增大尺寸 */
            height: 38px; /* 略微增大尺寸 */
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 0 10px rgba(157, 25, 255, 0.4), 0 0 15px rgba(255, 42, 106, 0.3);
            position: relative;
            overflow: hidden;
        }
        
        .player-name-btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(45deg, rgba(157, 25, 255, 0.5), rgba(255, 42, 106, 0.5));
            opacity: 0;
            transition: opacity 0.3s ease;
            border-radius: 50%;
        }
        
        .player-name-btn:hover {
            transform: translateY(-3px) scale(1.05);
            box-shadow: 0 5px 20px rgba(157, 25, 255, 0.6), 0 5px 20px rgba(255, 42, 106, 0.4);
        }
        
        .player-name-btn:hover::before {
            opacity: 1;
        }
        
        .player-name-btn:active {
            transform: translateY(1px) scale(0.95);
            box-shadow: 0 2px 10px rgba(157, 25, 255, 0.4);
        }
        
        .player-name-btn i {
            font-size: 1.1rem;
            text-shadow: 0 0 5px rgba(255, 255, 255, 0.8);
            position: relative;
            z-index: 2;
        }
        
        @media (max-width: 768px) {
            .player-name-container {
                margin-top: 12px;
                padding-top: 10px;
            }
            
            .player-name-input {
                font-size: 0.6rem;
                padding: 8px 10px;
            }
            
            .player-name-btn {
                width: 34px;
                height: 34px;
            }
        }
        
        /* 输入错误的样式 */
        .player-name-input.input-error {
            animation: shake 0.5s cubic-bezier(.36,.07,.19,.97) both;
            border-color: rgba(255, 0, 0, 0.5);
            box-shadow: 0 0 15px rgba(255, 0, 0, 0.4);
        }
        
        @keyframes shake {
            10%, 90% { transform: translateX(-1px); }
            20%, 80% { transform: translateX(2px); }
            30%, 50%, 70% { transform: translateX(-3px); }
            40%, 60% { transform: translateX(3px); }
        }

        /* 更新全面屏设备适配 */
        @media only screen and 
            (device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3),
            (device-width: 390px) and (device-height: 844px) and (-webkit-device-pixel-ratio: 3),
            (device-width: 428px) and (device-height: 926px) and (-webkit-device-pixel-ratio: 3),
            (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2),
            (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3),
            (device-width: 360px) and (device-height: 740px) and (-webkit-device-pixel-ratio: 3),
            (device-width: 412px) and (device-height: 915px) and (-webkit-device-pixel-ratio: 3.5),
            (device-width: 412px) and (device-height: 892px) and (-webkit-device-pixel-ratio: 3),
            (device-width: 393px) and (device-height: 851px) and (-webkit-device-pixel-ratio: 3) {
        
            /* 适配全面屏幕 */
            .game-wrapper {
                padding-top: env(safe-area-inset-top);
                padding-bottom: env(safe-area-inset-bottom);
                padding-left: env(safe-area-inset-left);
                padding-right: env(safe-area-inset-right);
            }
            
            .leaderboard .content-card {
                height: calc(35vh - 20px - env(safe-area-inset-top));
            }
            
            .sidebar .content-card {
                height: calc(25vh - 20px - env(safe-area-inset-bottom));
                padding-bottom: calc(15px + env(safe-area-inset-bottom));
            }
            
            /* 调整游戏区域在全面屏下的大小 */
            .game-area {
                height: calc(40vh + env(safe-area-inset-top) + env(safe-area-inset-bottom));
            }
        }

        /* 添加折叠屏和大屏手机适配 */
        @media (min-width: 400px) and (max-width: 896px) and (min-height: 800px) {
            /* 竖屏折叠屏/大屏手机 */
            @media (orientation: portrait) {
                .leaderboard {
                    max-height: 25vh;
                }
                
                .game-area {
                    height: 55vh;
                }
                
                .sidebar {
                    max-height: 20vh;
                }
                
                .game-score {
                    font-size: 1.4rem;
                }
                
                .overlay-start-btn {
                    font-size: 1.2rem;
                    padding: 1.2rem 2rem;
                }
            }
            
            /* 横屏折叠屏/大屏手机 */
            @media (orientation: landscape) {
                .game-area {
                    width: 65%;
                }
                
                .leaderboard, .sidebar {
                    width: 35%;
                }
                
                .leaderboard-card {
                    padding: 8px;
                }
                
                .player-ip {
                    font-size: 0.6rem;
                }
                
                .player-score {
                    font-size: 0.8rem;
                }
            }
        }

        /* 调整iPad和平板设备 */
        @media (min-width: 768px) and (max-width: 1024px) {
            .game-area {
                padding: 10px;
            }
            
            .leaderboard, .sidebar {
                padding: 12px;
            }
            
            /* 平板横屏优化 */
            @media (orientation: landscape) {
                .game-wrapper {
                    flex-direction: row;
                }
                
                .game-area {
                    width: 60%;
                    height: 100vh;
                }
                
                .leaderboard {
                    width: 20%; 
                    height: 100vh;
                    max-height: 100vh;
                }
                
                .sidebar {
                    width: 20%;
                    height: 100vh;
                    max-height: 100vh;
                }
            }
        }

        /* 增强移动端触摸反馈 */
        @media (hover: none) and (pointer: coarse) {
            /* 按钮点击效果 */
            .start-btn:active, .overlay-start-btn:active, .pagination-btn:active, .player-name-btn:active {
                transform: scale(0.95);
                filter: brightness(1.1);
                transition: transform 0.1s ease, filter 0.1s ease;
            }
            
            /* 触摸波纹效果 */
            .game-btn, .pagination-btn, .player-name-btn, .tab-btn {
                position: relative;
                overflow: hidden;
            }
            
            .game-btn:after, .pagination-btn:after, .player-name-btn:after, .tab-btn:after {
                content: '';
                display: block;
                position: absolute;
                width: 100%;
                height: 100%;
                top: 0;
                left: 0;
                pointer-events: none;
                background-image: radial-gradient(circle, rgba(255, 255, 255, 0.3) 10%, transparent 10.01%);
                background-repeat: no-repeat;
                background-position: 50%;
                transform: scale(10, 10);
                opacity: 0;
                transition: transform 0.3s, opacity 0.5s;
            }
            
            .game-btn:active:after, .pagination-btn:active:after, .player-name-btn:active:after, .tab-btn:active:after {
                transform: scale(0, 0);
                opacity: 0.3;
                transition: 0s;
            }
        }

        /* 优化移动端触控体验 */
        .game-score {
            user-select: none;
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
        }

        /* 优化触摸区域 */
        .tab-btn, .pagination-btn, .game-btn, .player-name-btn, .start-btn, .overlay-start-btn {
            touch-action: manipulation;
        }

        /* 优化键盘和触摸交互 */
        function ensureSquareContainer() {
            const container = document.querySelector('.snake-game-container');
            const gameArea = document.querySelector('.game-area');
            
            // 计算可用空间的方式取决于页面当前布局
            let availableSize;
            
            // 获取视窗宽度来判断是否为移动设备布局
            const viewportWidth = window.innerWidth;
            const viewportHeight = window.innerHeight;
            const isLandscape = viewportWidth > viewportHeight;
            
            // 检测是否是移动设备
            const isMobile = window.innerWidth <= 1024;
            
            if (isMobile) {
                if (isLandscape) {
                    // 横屏移动设备：游戏区域设置为视窗高度的90%
                    availableSize = viewportHeight * 0.90;
                } else {
                    // 竖屏移动设备：考虑游戏区域的实际高度
                    const gameAreaHeight = gameArea.clientHeight;
                    availableSize = Math.min(gameArea.clientWidth, gameAreaHeight) * 0.92;
                }
            } else {
                // 桌面布局：游戏区域的可用空间
                availableSize = Math.min(gameArea.clientWidth, gameArea.clientHeight) * 0.9;
            }
            
            // 设置容器为正方形
            container.style.width = `${availableSize}px`;
            container.style.height = `${availableSize}px`;
            
            // 确保游戏容器居中
            container.style.position = 'absolute';
            container.style.left = '50%';
            container.style.top = '50%';
            container.style.transform = 'translate(-50%, -50%)';
            
            console.log(`Container resized: ${availableSize}x${availableSize} pixels, Viewport: ${viewportWidth}x${viewportHeight}, Layout: ${isLandscape ? 'landscape' : 'portrait'}`);
        }
    </style>
</head>
<body>
    <div class="game-wrapper">
        <div class="leaderboard">
            <div class="content-card">
                <h2 class="leaderboard-title">LEADERBOARD</h2>
                
                <!-- 排行榜选项卡 -->
                <div class="leaderboard-tabs">
                    <button class="tab-btn active" data-sort="score">HIGH SCORES</button>
                    <button class="tab-btn" data-sort="time">RECENT GAMES</button>
                </div>
                
                <!-- 排行榜内容 -->
                <div class="leaderboard-card-container" id="leaderboard-container">
                    <!-- 排行榜条目将通过JavaScript动态添加 -->
                    <div class="loading-indicator">LOADING...</div>
                </div>
                
                <!-- 分页控件 -->
                <div class="pagination-controls">
                    <button class="pagination-btn" id="prev-page" disabled>
                        <i class="bi bi-chevron-left"></i>
                    </button>
                    <span class="page-info" id="page-info">PAGE 1 / 1</span>
                    <button class="pagination-btn" id="next-page" disabled>
                        <i class="bi bi-chevron-right"></i>
                    </button>
                </div>
            </div>
        </div>
        
        <div class="game-area">
            <div class="snake-game-container">
                <!-- 游戏画布 -->
                <canvas id="snakeCanvas" class="snake-game-canvas"></canvas>
                
                <!-- 游戏覆盖层与开始按钮 -->
                <div id="gameOverlay" class="game-overlay">
                    <!-- 静态游戏预览元素 -->
                    <div class="overlay-snake">
                        <div class="snake-segment snake-head"></div>
                        <div class="snake-segment snake-body-1"></div>
                        <div class="snake-segment snake-body-2"></div>
            </div>
                    <div class="overlay-food"></div>
                    
                    <button id="overlayStartBtn" class="overlay-start-btn">START GAME</button>
                </div>
            </div>
            <!-- 分数显示 -->
            <div id="gameScore" class="game-score">SCORE: 0</div>
        </div>
        
        <div class="sidebar">
            <div class="content-card">
                <h1 class="game-title">SNAKE GAME</h1>
                <button id="startBtn" class="start-btn">START</button>
            
            <div class="controls-row">
                <button id="muteBtn" class="game-btn">
                    <i class="bi bi-volume-up-fill"></i>
                </button>
                <button id="pauseBtn" class="game-btn">
                    <i class="bi bi-pause-fill"></i>
                </button>
            </div>
            
            <div class="instructions">
                    <div class="instructions-title">HOW TO PLAY</div>
                    
                    <div class="instruction-row">
                        <div class="instruction-icon">
                            <i class="bi bi-arrow-up-circle"></i>
                        </div>
                        <div class="instruction-text">
                            USE <span class="game-key">↑</span> <span class="game-key">↓</span> <span class="game-key">←</span> <span class="game-key">→</span> OR <span class="game-key">W</span> <span class="game-key">S</span> <span class="game-key">A</span> <span class="game-key">D</span> TO MOVE
                        </div>
                    </div>
                    
                    <div class="instruction-row">
                        <div class="instruction-icon">
                            <i class="bi bi-phone"></i>
                        </div>
                        <div class="instruction-text">
                            SWIPE TO CONTROL ON MOBILE
                        </div>
                    </div>
                    
                    <div class="instruction-row">
                        <div class="instruction-icon">
                            <i class="bi bi-arrow-repeat"></i>
                        </div>
                        <div class="instruction-text">
                            PRESS <span class="game-key">SPACE</span> TO RESTART
                        </div>
                    </div>
                    
                    <div class="instruction-row">
                        <div class="instruction-icon">
                            <i class="bi bi-pause-circle"></i>
                        </div>
                        <div class="instruction-text">
                            PRESS <span class="game-key">P</span> TO PAUSE
                        </div>
                    </div>
                </div>
                
                <!-- 玩家名称输入 -->
                <div class="player-name-container">
                    <div class="instructions-title">PLAYER NAME</div>
                    <div class="player-name-input-container">
                        <input type="text" id="playerNameInput" class="player-name-input" 
                            placeholder="ENTER YOUR NAME" maxlength="15" 
                            pattern="[A-Za-z0-9 ]+" 
                            title="英文字母、数字和空格">
                        <button id="saveNameBtn" class="player-name-btn">
                            <i class="bi bi-check-circle"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- 脚本 -->
    <script type="module">
        import SnakeGame from './js/game.js';
        
        // 全局变量 - 排行榜状态
        let currentSort = 'score';  // 默认按分数排序
        let currentPage = 1;        // 当前页码
        let pageSize = 10;          // 每页显示条数
        let totalPages = 1;         // 总页数
        
        // 请修改为您的实际Worker URL
        const API_BASE_URL = 'https://snake-api.318604lak.workers.dev';
        
        // 获取用户IP地址和位置
        async function getUserInfo() {
            try {
                // 获取玩家名称
                const playerName = localStorage.getItem('playerName') || generateRandomName();
                
                // 先获取IP地址
                const ipResponse = await fetch('https://api.ipify.org?format=json');
                const ipData = await ipResponse.json();
                const ip = ipData.ip;
                
                // 然后获取位置信息
                try {
                    const geoResponse = await fetch(`https://ipapi.co/${ip}/json/`);
                    const geoData = await geoResponse.json();
                    
                    return {
                        ip: ip,
                        playerName: playerName,
                        city: geoData.city || 'Unknown',
                        region: geoData.region || '',
                        country: geoData.country_name || ''
                    };
                } catch (geoError) {
                    console.warn('获取地理位置失败:', geoError);
                    return { ip: ip, playerName: playerName, city: 'Unknown', region: '', country: '' };
                }
            } catch (error) {
                console.error('获取IP地址失败:', error);
                const playerName = localStorage.getItem('playerName') || generateRandomName();
                return { ip: 'Unknown', playerName: playerName, city: 'Unknown', region: '', country: '' };
            }
        }
        
        // 生成随机玩家名称
        function generateRandomName() {
            const adjectives = ['Cool', 'Epic', 'Swift', 'Brave', 'Mighty', 'Silent', 'Shadow', 'Cosmic', 'Electric', 'Golden'];
            const nouns = ['Snake', 'Cobra', 'Python', 'Viper', 'Mamba', 'Dragon', 'Serpent', 'Hunter', 'Knight', 'Warrior'];
            
            const adj = adjectives[Math.floor(Math.random() * adjectives.length)];
            const noun = nouns[Math.floor(Math.random() * nouns.length)];
            const number = Math.floor(Math.random() * 100);
            
            return `${adj}${noun}${number}`;
        }
        
        // 保存玩家名称
        function savePlayerName() {
            const nameInput = document.getElementById('playerNameInput');
            let playerName = nameInput.value.trim();
            
            // 验证输入，只允许英文、数字和空格
            if (!/^[A-Za-z0-9 ]+$/.test(playerName)) {
                playerName = playerName.replace(/[^A-Za-z0-9 ]/g, '');
                nameInput.value = playerName;
                
                // 如果清理后为空，生成随机名称
                if (playerName === '') {
                    playerName = generateRandomName();
                    nameInput.value = playerName;
                }
                
                // 显示输入错误的视觉反馈
                nameInput.classList.add('input-error');
                setTimeout(() => {
                    nameInput.classList.remove('input-error');
                }, 500);
            }
            
            if (playerName === '') {
                playerName = generateRandomName();
                nameInput.value = playerName;
            }
            
            localStorage.setItem('playerName', playerName);
            
            // 显示提示消息
            const button = document.getElementById('saveNameBtn');
            const originalIcon = button.innerHTML;
            button.innerHTML = '<i class="bi bi-check-lg"></i>';
            button.style.backgroundColor = '#28a745';
            
            setTimeout(() => {
                button.innerHTML = originalIcon;
                button.style.backgroundColor = '';
            }, 1500);
            
            return playerName;
        }
        
        // 改进的加载排行榜函数
        async function loadLeaderboard(sort = currentSort, page = currentPage) {
            try {
                // 创建临时容器用于构建新内容，避免直接操作DOM
                const tempContainer = document.createElement('div');
                
                // 获取当前容器，但不立即清空它
                const container = document.getElementById('leaderboard-container');
                
                // 如果当前没有加载指示器，添加一个，并设置淡入动画
                if (!container.querySelector('.loading-indicator')) {
                    const loadingIndicator = document.createElement('div');
                    loadingIndicator.className = 'loading-indicator';
                    loadingIndicator.textContent = 'LOADING...';
                    loadingIndicator.style.opacity = '0';
                    container.appendChild(loadingIndicator);
                    
                    // 触发重排以应用动画
                    void loadingIndicator.offsetWidth;
                    loadingIndicator.style.opacity = '1';
                    loadingIndicator.style.transition = 'opacity 0.3s ease';
                }
                
                // 更新当前排序和页码
                currentSort = sort;
                currentPage = page;
                
                let leaderboard;
                
                // 设置超时
                const timeoutPromise = new Promise((_, reject) => 
                    setTimeout(() => reject(new Error('请求超时')), 5000)
                );
                
                // 尝试使用fetch API从服务器获取排行榜数据
                try {
                    // 构建API请求URL，包含排序和分页参数
                    const apiUrl = `${API_BASE_URL}/api/getLeaderboard?sort=${sort}&page=${page}&pageSize=${pageSize}`;
                    
                    // 使用Promise.race来实现超时功能
                    const response = await Promise.race([
                        fetch(apiUrl),
                        timeoutPromise
                    ]);
                    
                    if (!response.ok) {
                        throw new Error('Server API error: ' + response.status);
                    }
                    
                    const responseData = await response.json();
                    
                    // 检查返回的数据是否符合预期格式
                    if (!responseData.data || !Array.isArray(responseData.data)) {
                        throw new Error('Invalid API response format');
                    }
                    
                    leaderboard = responseData.data;
                    
                    // 确保所有记录都有hostname字段
                    leaderboard = leaderboard.map(entry => {
                        if (!entry.hostname) {
                            entry.hostname = 'unknown-host';
                        }
                        return entry;
                    });
                    
                    // 更新分页信息
                    if (responseData.pagination) {
                        totalPages = responseData.pagination.totalPages || 1;
                        updatePaginationControls(page, totalPages);
                    }
                    
                    console.log('Leaderboard loaded from API');
                    
                    // 直接更新UI
                    smoothUpdateLeaderboardUI(leaderboard, sort);
                } catch (apiError) {
                    console.warn('Could not load from API, using local storage:', apiError);
                    
                    // 使用本地存储作为备用
                    leaderboard = JSON.parse(localStorage.getItem('snakeLeaderboard')) || [];
                    
                    // 确保所有记录都有hostname字段（兼容旧数据）
                    leaderboard = leaderboard.map(entry => {
                        if (!entry.hostname) {
                            entry.hostname = 'unknown-host';
                        }
                        return entry;
                    });
                    
                    // 如果没有数据，创建模拟数据
                    if (leaderboard.length === 0) {
                        leaderboard = createMockLeaderboardData();
                        localStorage.setItem('snakeLeaderboard', JSON.stringify(leaderboard));
                    }
                    
                    // 本地排序和分页
                    if (sort === 'time') {
                        leaderboard.sort((a, b) => new Date(b.date) - new Date(a.date));
                    } else {
                        leaderboard.sort((a, b) => b.score - a.score);
                    }
                    
                    // 计算总页数
                    totalPages = Math.ceil(leaderboard.length / pageSize);
                    
                    // 分页
                    const startIndex = (page - 1) * pageSize;
                    const endIndex = startIndex + pageSize;
                    leaderboard = leaderboard.slice(startIndex, endIndex);
                    
                    // 更新分页控件
                    updatePaginationControls(page, totalPages);
                    
                    // 显示API错误提示，但仍然显示数据
                    const errorMessage = document.createElement('div');
                    errorMessage.className = 'error-message';
                    errorMessage.textContent = `API连接失败: ${apiError.message}. 使用本地数据...`;
                    errorMessage.style.opacity = '0';
                    errorMessage.style.marginBottom = '10px';
                    
                    // 淡出loading指示器
                    const loadingIndicator = container.querySelector('.loading-indicator');
                    if (loadingIndicator) {
                        loadingIndicator.style.transition = 'opacity 0.3s ease';
                        loadingIndicator.style.opacity = '0';
                        
                        // 延迟后移除loading指示器
                        setTimeout(() => {
                            // 清空容器
                            container.innerHTML = '';
                            
                            // 添加错误消息
                            container.appendChild(errorMessage);
                            void errorMessage.offsetWidth;
                            errorMessage.style.transition = 'opacity 0.3s ease';
                            errorMessage.style.opacity = '1';
                            
                            // 延迟后更新排行榜
                            setTimeout(() => {
                                // 更新UI显示排行榜数据
                                smoothUpdateLeaderboardUI(leaderboard, sort);
                            }, 500);
                        }, 300);
                    } else {
                        // 如果没有loading指示器，直接更新UI
                        smoothUpdateLeaderboardUI(leaderboard, sort);
                    }
                }
            
                return leaderboard;
            } catch (error) {
                console.error('Error loading leaderboard:', error);
                const container = document.getElementById('leaderboard-container');
                
                // 使用淡入淡出效果显示错误信息
                const errorDiv = document.createElement('div');
                errorDiv.className = 'error-message';
                errorDiv.textContent = `加载排行榜失败: ${error.message}`;
                errorDiv.style.opacity = '0';
                
                // 淡出现有内容
                Array.from(container.children).forEach(child => {
                    child.style.transition = 'opacity 0.3s ease';
                    child.style.opacity = '0';
                });
                
                // 延迟后清除内容并显示错误
                setTimeout(() => {
                    container.innerHTML = '';
                    container.appendChild(errorDiv);
                    // 触发重排
                    void errorDiv.offsetWidth;
                    errorDiv.style.transition = 'opacity 0.3s ease';
                    errorDiv.style.opacity = '1';
                }, 300);
                
                return [];
            }
        }
        
        // 更新分页控件
        function updatePaginationControls(currentPage, totalPages) {
            const prevBtn = document.getElementById('prev-page');
            const nextBtn = document.getElementById('next-page');
            const pageInfo = document.getElementById('page-info');
            
            // 更新页码信息
            pageInfo.textContent = `PAGE ${currentPage} / ${totalPages}`;
            
            // 启用/禁用上一页按钮
            prevBtn.disabled = currentPage <= 1;
            
            // 启用/禁用下一页按钮
            nextBtn.disabled = currentPage >= totalPages;
        }
        
        // 创建模拟排行榜数据
        function createMockLeaderboardData() {
            const data = [];
            
            // 创建10条模拟记录
            for (let i = 0; i < 10; i++) {
                const date = new Date();
                date.setDate(date.getDate() - i);
                
                data.push({
                    id: date.toISOString() + '-192.168.1.' + (100 + i),
                    ip: '192.168.1.' + (100 + i),
                    hostname: `host-${100 + i}`,
                    score: 90 - i * 5,
                    date: date.toISOString(),
                    city: i % 2 === 0 ? 'Beijing' : 'Shanghai',
                    region: '',
                    country: 'China'
                });
            }
            
            return data;
        }
        
        // 保存分数到服务器
        async function saveScore(score) {
            try {
                // 获取用户IP和位置信息
                const userInfo = await getUserInfo();
                
                // 创建一个新的分数记录，使用ISO格式保存完整时间信息
                const date = new Date().toISOString();
                
                // 创建唯一标识符
                const recordId = date + '-' + userInfo.ip;
                
                // 创建一个新的分数记录
                const scoreData = {
                    id: recordId,
                    ip: userInfo.ip,
                    playerName: userInfo.playerName,
                    score: score,
                    date: date,
                    city: userInfo.city,
                    region: userInfo.region,
                    country: userInfo.country
                };
                
                let saved = false;
                
                // 尝试使用API保存
                try {
                    const response = await fetch(`${API_BASE_URL}/api/saveScore`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(scoreData)
                    });
                    
                    if (!response.ok) {
                        throw new Error('API save failed: ' + response.status);
                    }
                    
                    saved = true;
                    console.log('Score saved via API');
                } catch (apiError) {
                    console.warn('API save failed, trying local storage:', apiError);
                    
                    // 如果API保存失败，使用本地存储作为备用
                    await updateLocalLeaderboard(score, userInfo);
                    saved = true;
                }
                
                // 如果保存成功，重新加载排行榜
                if (saved) {
                    await loadLeaderboard(currentSort, 1); // 保存后回到第一页
                }
                
                return saved;
            } catch (error) {
                console.error('Error saving score:', error);
                
                // 最后的备用方案：使用本地存储
                const playerName = localStorage.getItem('playerName') || generateRandomName();
                const userInfo = { ip: 'Unknown', playerName: playerName, city: 'Unknown', region: '', country: '' };
                await updateLocalLeaderboard(score, userInfo);
                return false;
            }
        }
        
        // 更新本地排行榜（当服务器API不可用时的备用方案）
        async function updateLocalLeaderboard(score, userInfo) {
            let leaderboard = JSON.parse(localStorage.getItem('snakeLeaderboard')) || [];
            
            // 创建一个ISO格式的时间字符串
            const currentDate = new Date().toISOString();
            
            // 使用时间和IP创建唯一标识
            const recordId = currentDate + '-' + userInfo.ip;
            
            // 不再检查IP是否存在，直接添加新记录
            leaderboard.push({ 
                id: recordId,
                ip: userInfo.ip,
                playerName: userInfo.playerName,
                score: score,
                date: currentDate,
                city: userInfo.city,
                region: userInfo.region,
                country: userInfo.country
            });
            
            // 保存到本地存储
            localStorage.setItem('snakeLeaderboard', JSON.stringify(leaderboard));
            
            // 重新加载排行榜显示
            await loadLeaderboard(currentSort, 1); // 保存后回到第一页
        }
        
        // 平滑更新排行榜UI
        function smoothUpdateLeaderboardUI(leaderboard, sortType) {
            const container = document.getElementById('leaderboard-container');
            
            // 如果没有数据
            if (leaderboard.length === 0) {
                const noDataDiv = document.createElement('div');
                noDataDiv.className = 'no-data';
                noDataDiv.textContent = 'NO RECORDS FOUND';
                noDataDiv.style.opacity = '0';
                
                // 淡出现有内容
                Array.from(container.children).forEach(child => {
                    child.style.transition = 'opacity 0.3s ease';
                    child.style.opacity = '0';
                });
                
                // 延迟后替换内容
                setTimeout(() => {
                    container.innerHTML = '';
                    container.appendChild(noDataDiv);
                    // 触发重排
                    void noDataDiv.offsetWidth;
                    noDataDiv.style.transition = 'opacity 0.3s ease';
                    noDataDiv.style.opacity = '1';
                }, 300);
                
                return;
            }
            
            // 创建一个文档片段来存储新的排行榜条目
            const fragment = document.createDocumentFragment();
            const newCards = [];
            
            // 构建所有排行榜条目
            leaderboard.forEach((entry, index) => {
                // 创建排行榜卡片元素
                const card = document.createElement('div');
                card.className = 'leaderboard-card';
                card.style.opacity = '0'; // 初始设为不可见
                card.style.transform = 'translateY(10px)'; // 初始位置偏移
                
                // 只在分数排序时才添加前三名的特殊类
                if (sortType === 'score') {
                    // 注意：这里的index是当前页的索引，需要考虑当前页码
                    const globalRank = (currentPage - 1) * pageSize + index + 1;
                    if (globalRank === 1) card.classList.add('top1');
                    if (globalRank === 2) card.classList.add('top2');
                    if (globalRank === 3) card.classList.add('top3');
                }
                
                // 为每个记录添加唯一数据属性
                if (entry.id) {
                    card.setAttribute('data-record-id', entry.id);
                }
                
                // 创建奖牌图标
                let medalIcon = '';
                // 只在分数排序时显示奖牌
                if (sortType === 'score') {
                    const globalRank = (currentPage - 1) * pageSize + index + 1;
                    if (globalRank === 1) medalIcon = '🥇';
                    else if (globalRank === 2) medalIcon = '🥈';
                    else if (globalRank === 3) medalIcon = '🥉';
                }
                
                // 格式化IP地址，仅显示部分字符并加入星号以保护隐私
                const maskedIP = entry.ip.split('.').map((part, idx) => 
                    idx < 2 ? part : '**'
                ).join('.');
                
                // 创建显示名称: 玩家名称@掩码IP
                const displayName = entry.playerName ? 
                    `${entry.playerName}@${maskedIP}` : 
                    maskedIP;
                
                // 格式化日期为北京时间，精确到秒
                let formattedDate = 'Unknown';
                if (entry.date) {
                    try {
                        const gameDate = new Date(entry.date);
                        
                        // 转换为北京时间 (UTC+8)
                        const beijingTime = new Date(gameDate.getTime() + 8 * 60 * 60 * 1000);
                        
                        // 格式化为 YYYY-MM-DD HH:MM:SS
                        const year = beijingTime.getUTCFullYear();
                        const month = (beijingTime.getUTCMonth() + 1).toString().padStart(2, '0');
                        const day = beijingTime.getUTCDate().toString().padStart(2, '0');
                        const hours = beijingTime.getUTCHours().toString().padStart(2, '0');
                        const minutes = beijingTime.getUTCMinutes().toString().padStart(2, '0');
                        const seconds = beijingTime.getUTCSeconds().toString().padStart(2, '0');
                        
                        formattedDate = `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
                    } catch (e) {
                        console.error('日期格式化错误:', e);
                    }
                }
                
                // 获取位置信息
                const location = entry.city ? `${entry.city}` : 'Unknown';
                
                // 构建卡片内容
                card.innerHTML = `
                    <div class="rank">
                        <div class="rank-number">${(currentPage - 1) * pageSize + index + 1}</div>
                        ${medalIcon ? `<div class="rank-medal">${medalIcon}</div>` : ''}
                    </div>
                    <div class="player-info">
                        <div class="player-ip">${displayName}</div>
                        <div class="player-score">${entry.score}</div>
                        <div class="player-details">
                            <div class="player-location">${location}</div>
                            <div class="player-date">${formattedDate}</div>
                        </div>
                    </div>
                `;
                
                // 添加到集合
                newCards.push(card);
                fragment.appendChild(card);
            });
            
            // 淡出现有内容
            Array.from(container.children).forEach(child => {
                if (child.classList.contains('loading-indicator') || child.classList.contains('error-message')) {
                    child.style.transition = 'opacity 0.3s ease';
                    child.style.opacity = '0';
                }
            });
            
            // 延迟后替换内容
            setTimeout(() => {
                // 清除旧内容
                container.innerHTML = '';
                
                // 添加新内容
                container.appendChild(fragment);
                
                // 依次淡入新卡片，创建交错动画效果
                newCards.forEach((card, index) => {
                    // 设置过渡效果
                    card.style.transition = 'opacity 0.4s ease, transform 0.4s ease';
                    
                    // 延迟依次显示元素
                    setTimeout(() => {
                        card.style.opacity = '1';
                        card.style.transform = 'translateY(0)';
                    }, 30 * index); // 每个卡片有30ms的显示延迟
                });
            }, 300);
        }
        
        // 更新排行榜UI (保留作为备用)
        function updateLeaderboardUI(leaderboard, sortType) {
            // 此函数保留但不使用，所有更新都通过smoothUpdateLeaderboardUI完成
            console.log('使用平滑过渡更新UI');
            smoothUpdateLeaderboardUI(leaderboard, sortType);
        }
        
        // 初始化排行榜控件
        function initLeaderboardControls() {
            // 获取排行榜选项卡按钮
            const tabButtons = document.querySelectorAll('.tab-btn');
            
            // 为每个选项卡按钮添加点击事件
            tabButtons.forEach(btn => {
                btn.addEventListener('click', () => {
                    // 移除所有按钮的active类
                    tabButtons.forEach(b => b.classList.remove('active'));
                    
                    // 为点击的按钮添加active类
                    btn.classList.add('active');
                    
                    // 获取排序类型
                    const sortType = btn.getAttribute('data-sort');
                    
                    // 加载对应排序的排行榜，并重置到第一页
                    loadLeaderboard(sortType, 1);
                });
            });
            
            // 获取分页按钮
            const prevBtn = document.getElementById('prev-page');
            const nextBtn = document.getElementById('next-page');
            
            // 添加上一页按钮事件
            prevBtn.addEventListener('click', () => {
                if (currentPage > 1) {
                    loadLeaderboard(currentSort, currentPage - 1);
                }
            });
            
            // 添加下一页按钮事件
            nextBtn.addEventListener('click', () => {
                if (currentPage < totalPages) {
                    loadLeaderboard(currentSort, currentPage + 1);
                }
            });
        }
        
        // 当DOM加载完成后初始化
        document.addEventListener('DOMContentLoaded', async () => {
            // 初始化排行榜控件
            initLeaderboardControls();
            
            // 加载初始排行榜数据
            await loadLeaderboard('score', 1);
            
            // 初始化玩家名称输入框
            const playerNameInput = document.getElementById('playerNameInput');
            const saveNameBtn = document.getElementById('saveNameBtn');
            
            // 加载已保存的名称
            const savedName = localStorage.getItem('playerName');
            if (savedName) {
                playerNameInput.value = savedName;
            } else {
                // 生成随机名称
                const randomName = generateRandomName();
                playerNameInput.value = randomName;
                localStorage.setItem('playerName', randomName);
            }
            
            // 添加保存按钮事件
            saveNameBtn.addEventListener('click', savePlayerName);
            
            // 回车键也可以保存
            playerNameInput.addEventListener('keydown', (e) => {
                if (e.key === 'Enter') {
                    savePlayerName();
                }
                
                // 阻止WASD、箭头键和空格传播到游戏控制
                const gameControlKeys = ['w', 'a', 's', 'd', 'W', 'A', 'S', 'D', 
                                        'ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', ' ', 'p', 'P'];
                if (gameControlKeys.includes(e.key)) {
                    e.stopPropagation(); // 阻止事件冒泡
                }
            });
            
            // 添加输入过滤，实时移除不符合规则的字符
            playerNameInput.addEventListener('input', (e) => {
                const value = e.target.value;
                const sanitized = value.replace(/[^A-Za-z0-9 ]/g, '');
                
                if (value !== sanitized) {
                    e.target.value = sanitized;
                    
                    // 显示轻微错误提示
                    playerNameInput.classList.add('input-error');
                    setTimeout(() => {
                        playerNameInput.classList.remove('input-error');
                    }, 300);
                }
            });
            
            // 当输入框获得焦点时，暂停游戏控制以防止干扰
            playerNameInput.addEventListener('focus', () => {
                // 如果游戏正在进行，可以考虑自动暂停游戏
                // 或禁用键盘输入事件直到输入框失去焦点
                console.log('Input field focused, game controls temporarily disabled');
            });
            
            // 防止键盘事件触发游戏控制，确保可以正常输入
            document.addEventListener('keydown', function(e) {
                // 如果当前焦点在输入框，不要处理游戏控制键
                if (document.activeElement === playerNameInput) {
                    // 防止空格滚动页面
                    if (e.key === ' ') {
                        e.preventDefault();
                    }
                }
            }, true); // 使用捕获阶段
            
            // 强制游戏容器为完美正方形的函数
            function ensureSquareContainer() {
                const container = document.querySelector('.snake-game-container');
                const gameArea = document.querySelector('.game-area');
                
                // 计算可用空间的方式取决于页面当前布局
                let availableSize;
                
                // 获取视窗宽度来判断是否为移动设备布局
                const viewportWidth = window.innerWidth;
                const viewportHeight = window.innerHeight;
                const isLandscape = viewportWidth > viewportHeight;
                
                // 检测是否是移动设备
                const isMobile = window.innerWidth <= 1024;
                
                if (isMobile) {
                    if (isLandscape) {
                        // 横屏移动设备：游戏区域设置为视窗高度的90%
                        availableSize = viewportHeight * 0.90;
                    } else {
                        // 竖屏移动设备：考虑游戏区域的实际高度
                        const gameAreaHeight = gameArea.clientHeight;
                        availableSize = Math.min(gameArea.clientWidth, gameAreaHeight) * 0.92;
                    }
                } else {
                    // 桌面布局：游戏区域的可用空间
                    availableSize = Math.min(gameArea.clientWidth, gameArea.clientHeight) * 0.9;
                }
                
                // 设置容器为正方形
                container.style.width = `${availableSize}px`;
                container.style.height = `${availableSize}px`;
                
                // 确保游戏容器居中
                container.style.position = 'absolute';
                container.style.left = '50%';
                container.style.top = '50%';
                container.style.transform = 'translate(-50%, -50%)';
                
                console.log(`Container resized: ${availableSize}x${availableSize} pixels, Viewport: ${viewportWidth}x${viewportHeight}, Layout: ${isLandscape ? 'landscape' : 'portrait'}`);
            }
            
            // 执行初始调整并监听窗口大小变化
            ensureSquareContainer();
            window.addEventListener('resize', ensureSquareContainer);
            window.addEventListener('orientationchange', ensureSquareContainer);
            
            // 获取DOM元素
            const canvas = document.getElementById('snakeCanvas');
            const startBtn = document.getElementById('startBtn');
            const muteBtn = document.getElementById('muteBtn');
            const pauseBtn = document.getElementById('pauseBtn');
            const gameOverlay = document.querySelector('.game-overlay');
            const overlayStartBtn = document.querySelector('.overlay-start-btn');
            
            // 初始化时显示覆盖层，设置初始文本
            gameOverlay.classList.remove('hidden');
            overlayStartBtn.textContent = 'START GAME';
            
            // 创建游戏实例
            const game = new SnakeGame('snakeCanvas', {
                // 游戏配置
                gridSize: 20,
                initialSpeed: 150,
                speedIncrement: 2,
                initialSnakeLength: 3,
                enableAudio: true,
                audioVolume: 0.5,
                enableTouch: true,
                enableSwipe: true,
                
                // 事件回调
                onGameStart: () => {
                    pauseBtn.innerHTML = '<i class="bi bi-pause-fill"></i>';
                    startBtn.textContent = 'RESTART';
                    document.getElementById('gameScore').textContent = 'SCORE: 0';
                    
                    // 清除游戏结束界面元素
                    const gameOverTitle = gameOverlay.querySelector('.game-over-title');
                    if (gameOverTitle) {
                        gameOverlay.removeChild(gameOverTitle);
                    }
                    
                    const gameOverScore = gameOverlay.querySelector('.game-over-score');
                    if (gameOverScore) {
                        gameOverScore.style.display = 'none';
                    }
                    
                    // 隐藏游戏覆盖层
                    gameOverlay.classList.add('hidden');
                },
                onGameOver: async (score, highScore) => {
                    startBtn.textContent = 'START';
                    // 保存分数到服务器
                    await saveScore(score);
                    console.log('Game over! Score:', score, 'High Score:', highScore);
                    console.log('Score saved to leaderboard');
                    
                    // 更新覆盖按钮文本
                    overlayStartBtn.textContent = 'PLAY AGAIN';
                    
                    // 创建或更新分数显示
                    const existingScoreDisplay = gameOverlay.querySelector('.game-over-score');
                    if (existingScoreDisplay) {
                        existingScoreDisplay.textContent = `FINAL SCORE: ${score}`;
                        existingScoreDisplay.style.display = 'block';
                    } else {
                        // 创建游戏结束标题
                        const gameOverTitle = document.createElement('div');
                        gameOverTitle.className = 'game-over-title';
                        gameOverTitle.style.cssText = `
                            font-family: 'Press Start 2P', monospace;
                            font-size: 2rem;
                            color: #ff2a6a;
                            margin-bottom: 15px;
                            text-shadow: 0 0 15px rgba(255, 42, 106, 0.8);
                            text-transform: uppercase;
                            z-index: 30;
                        `;
                        gameOverTitle.textContent = 'GAME OVER';
                        
                        // 创建分数显示
                        const scoreDisplay = document.createElement('div');
                        scoreDisplay.className = 'game-over-score';
                        scoreDisplay.style.cssText = `
                            font-family: 'Press Start 2P', monospace;
                            font-size: 1.8rem;
                            color: #f0f8ff;
                            margin-bottom: 25px;
                            text-align: center;
                            text-shadow: 0 0 10px rgba(157, 25, 255, 0.8), 
                                        0 0 20px rgba(255, 42, 106, 0.5);
                            background: linear-gradient(90deg, #9d19ff 0%, #ff2a6a 100%);
                            -webkit-background-clip: text;
                            -webkit-text-fill-color: transparent;
                            padding: 5px 0;
                            z-index: 30;
                        `;
                        scoreDisplay.textContent = `FINAL SCORE: ${score}`;
                        
                        // 添加元素到覆盖层
                        gameOverlay.insertBefore(gameOverTitle, gameOverlay.firstChild);
                        gameOverlay.insertBefore(scoreDisplay, overlayStartBtn);
                    }
                    
                    // 显示游戏覆盖层
                    gameOverlay.classList.remove('hidden');
                    
                    // 确保强制刷新排行榜
                    setTimeout(async () => {
                        await loadLeaderboard();
                    }, 500);
                }
            });
            
            // 调整画布大小以适应窗口
            const resizeCanvas = () => {
                // 先确保容器是正方形
                ensureSquareContainer();
                // 等待一小段时间，确保容器大小已经应用
                setTimeout(() => {
                // 然后调整游戏画布
                game.resize();
                }, 10);
            };
            
            // 绑定窗口大小改变事件，使用防抖处理快速连续的resize事件
            let resizeTimeout;
            window.addEventListener('resize', () => {
                clearTimeout(resizeTimeout);
                resizeTimeout = setTimeout(resizeCanvas, 100);
            });
            
            // 绑定方向变化事件，确保在设备旋转时重新调整
            window.addEventListener('orientationchange', () => {
                // 方向变化可能需要更长时间来稳定尺寸
                setTimeout(resizeCanvas, 300);
            });
            
            // 初始调整
            resizeCanvas();
            // 页面加载完成后再次调整，确保尺寸正确
            window.addEventListener('load', resizeCanvas);
            
            // 生成初始的蛇和食物位置，让它们在游戏开始前就可见
            const initialSnake = [
                { x: 10, y: 10 }, // 头部
                { x: 9, y: 10 },
                { x: 8, y: 10 }
            ];
            const initialFood = { x: 15, y: 10 };

            // 确保游戏渲染器准备好
            if (game && game.renderer) {
                // 首次渲染，确保蛇和食物非常明显
                game.renderer.render({
                    snake: initialSnake,
                    food: initialFood,
                    score: 0,
                    gameOver: true
                });
                
                // 再次渲染以确保显示
                setTimeout(() => {
                    console.log("重新渲染初始游戏状态");
                    game.renderer.render({
                        snake: initialSnake,
                        food: initialFood,
                        score: 0,
                        gameOver: true
                    });
                }, 100);
            }
            
            // 绑定开始按钮点击事件
            startBtn.addEventListener('click', () => {
                game.start();
            });
            
            // 绑定覆盖层开始按钮点击事件
            overlayStartBtn.addEventListener('click', () => {
                game.start();
            });
            
            // 绑定静音按钮点击事件
            muteBtn.addEventListener('click', () => {
                const muted = game.toggleAudio();
                muteBtn.innerHTML = muted 
                    ? '<i class="bi bi-volume-mute-fill"></i>' 
                    : '<i class="bi bi-volume-up-fill"></i>';
            });
            
            // 绑定暂停按钮点击事件
            pauseBtn.addEventListener('click', () => {
                game.togglePause();
                pauseBtn.innerHTML = pauseBtn.innerHTML.includes('pause') 
                    ? '<i class="bi bi-play-fill"></i>' 
                    : '<i class="bi bi-pause-fill"></i>';
            });
            
            // 预创建音频文件
            const audioFiles = [
                { name: 'background.mp3', path: './audio/background.mp3' },
                { name: 'eat.mp3', path: './audio/eat.mp3' },
                { name: 'gameOver.mp3', path: './audio/gameOver.mp3' },
                { name: 'move.mp3', path: './audio/move.mp3' }
            ];
            
            // 创建空的音频文件（占位符）
            audioFiles.forEach(file => {
                fetch(file.path)
                    .catch(() => {
                        console.log(`音频文件未找到: ${file.name}，这是预期的，稍后会添加`);
                    });
            });

            // 监听分数变化
            game.onScoreUpdate = (score) => {
                document.getElementById('gameScore').textContent = `SCORE: ${score}`;
            };
        });
    </script>
</body>
</html> 